//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: CustomControls.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "CustomControls.hpp"

// Declare the bitmap loading function
extern void wxC26B3InitBitmapResources();

namespace
{
// return the wxBORDER_SIMPLE that matches the current application theme
[[maybe_unused]]
wxBorder get_border_simple_theme_aware_bit()
{
#if wxVERSION_NUMBER >= 3300 && defined(__WXMSW__)
    return wxSystemSettings::GetAppearance().IsDark() ? wxBORDER_SIMPLE : wxBORDER_DEFAULT;
#else
    return wxBORDER_DEFAULT;
#endif
} // get_border_simple_theme_aware_bit
bool bBitmapLoaded = false;
} // namespace

TextPreviewDialogBase::TextPreviewDialogBase(
    wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if (!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC26B3InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer1);

    m_panel8 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    boxSizer1->Add(m_panel8, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer9 = new wxBoxSizer(wxVERTICAL);
    m_panel8->SetSizer(boxSizer9);

    m_editor = new wxStyledTextCtrl(m_panel8, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel8, wxSize(500, 300)), 0);
    // Configure the fold margin
    m_editor->SetMarginType(4, wxSTC_MARGIN_SYMBOL);
    m_editor->SetMarginMask(4, wxSTC_MASK_FOLDERS);
    m_editor->SetMarginSensitive(4, true);
    m_editor->SetMarginWidth(4, 0);

    // Configure the tracker margin
    m_editor->SetMarginWidth(1, 0);

    // Configure the symbol margin
    m_editor->SetMarginType(2, wxSTC_MARGIN_SYMBOL);
    m_editor->SetMarginMask(2, ~(wxSTC_MASK_FOLDERS));
    m_editor->SetMarginWidth(2, 0);
    m_editor->SetMarginSensitive(2, true);

    // Configure the line numbers margin
    m_editor->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_editor->SetMarginWidth(0, 0);

    // Configure the line symbol margin
    m_editor->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_editor->SetMarginMask(3, 0);
    m_editor->SetMarginWidth(3, 0);
    // Select the lexer
    m_editor->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_editor->StyleClearAll();
    m_editor->SetWrapMode(1);
    m_editor->SetIndentationGuides(0);
    m_editor->SetKeyWords(0, wxT(""));
    m_editor->SetKeyWords(1, wxT(""));
    m_editor->SetKeyWords(2, wxT(""));
    m_editor->SetKeyWords(3, wxT(""));
    m_editor->SetKeyWords(4, wxT(""));

    boxSizer9->Add(m_editor, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    wxBoxSizer* boxSizer5 = new wxBoxSizer(wxHORIZONTAL);

    boxSizer1->Add(boxSizer5, 0, wxALL | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(10));

    m_button_copy = new wxButton(this, wxID_COPY, _("Copy"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizer5->Add(m_button_copy, 0, wxALL, WXC_FROM_DIP(5));

    m_button_cancel =
        new wxButton(this, wxID_CANCEL, _("Close"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_button_cancel->SetDefault();

    boxSizer5->Add(m_button_cancel, 0, wxALL, WXC_FROM_DIP(5));

    SetName(wxT("TextPreviewDialogBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500, 300)));
    if (GetSizer()) {
        GetSizer()->Fit(this);
    }
    if (GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    if (!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
    // Connect events
    m_button_copy->Bind(wxEVT_COMMAND_BUTTON_CLICKED, &TextPreviewDialogBase::OnCopy, this);
    m_button_copy->Bind(wxEVT_UPDATE_UI, &TextPreviewDialogBase::OnCopyUI, this);
}

TextPreviewDialogBase::~TextPreviewDialogBase()
{
    m_button_copy->Unbind(wxEVT_COMMAND_BUTTON_CLICKED, &TextPreviewDialogBase::OnCopy, this);
    m_button_copy->Unbind(wxEVT_UPDATE_UI, &TextPreviewDialogBase::OnCopyUI, this);
}
